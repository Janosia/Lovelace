#include <iostream>
#include <vector>
using namespace std;
class DSU{
public:
    vector<int>Parent, Rank;
    int components;
    DSU(int n){
        components = n;
        Parent.resize(n);
        Rank.resize(n,0);
        for(int i =0; i<n ; i++)Parent[i] = i;
    }
    int Find(int x){
        return Parent[x] = (x == Parent[x]) ? x: Find(Parent[x]);
    }

    bool Union(int x, int y){
        int xset = Find(x), yset = Find(y);
        if(xset != yset){
            int rx = Rank[xset], ry = Rank[yset];
            if(rx > ry){
                Parent[yset] = xset;
            }else if (ry > rx){
                Parent[xset] = yset;
            }else{
                Parent[yset] = xset;
                Rank[xset]++;
            }
            components--;
            return true;
        }
        return false;
    }
};
int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    // i*N+j
    int N = graph.size();
    vector<vector<int>>edges;
    sort(initial.begin(), initial.end()); // O(NlogN)
    // O(N^2)
    for(int i =0; i<N ; i++){
        for(int j =0; j<N; j++){
            if(i==j) continue;
            if(graph[i][j])edges.push_back({i,j});
        }
    }
    DSU dsu(N);
    for(auto &edge : edges){
        dsu.Union(edge[0], edge[1]);
    }
    map<int,int>infected;
    for(auto &node : initial ) infected[node]++;
    int out =0, temp=-1;
    for(auto &node : initial){
        int cnt = 1;
        int ulp = dsu.Find(node);
        // cout << "for node "<<node << " parent is "<< ulp<<endl;
        for(int i =0; i<N; i++){
            if(dsu.Parent[i] == ulp && !infected[i] ){
                cnt++;
            }else if (dsu.Parent[i] == ulp && infected[i] && i != node){
                // cout << "connected to infected component "<<endl;
                cnt =0;
                break;
            }
        }
        if(cnt > out){
            out = cnt;
            temp = node;
        }
    }
    return (temp == -1)?initial[0] : temp;
}
